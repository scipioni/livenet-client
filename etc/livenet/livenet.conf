# Stateless configuration for initramfs and maintenance scripts
# Changes to this file requires an initramfs update

#RELEASE=quantal-gamma
KERNEL=$( (readlink /boot/initrd.img || readlink /initrd.img) | sed -e 's/^.*initrd.img-//' )
STATENFS=/states # nfs share that holds states
BACKUP=/images/backup # nfs share that holds backup
ALLUPDATES=var/lib/livenet/updates # not absolute
STATETMP=.state
ROOT_LABEL=LROOT
SWAP_LABEL=LSWAP
LIVENET_DIR=/livenet
DIVERSIONS=/var/cache/livenet/diversions.conf
DIVERSIONS_LOCAL=/etc/livenet/diversions.conf
UPDATE_FLAG=/etc/livenet/local/current_update
ZFSPOOL=LNPOOL
ZFSROOT=VROOT
#SHUTDOWN_HOUR="04:00:00"

ZONEINFO=Europe/Rome
ROOT_SIZE=20000 #MByte, utilizzato solo nel caso di ridimensionamento di partizioni esistenti
SWAP_SIZE=1000 #MByte
FLAG_VERSION="/etc/livenet/version"
FLAG_NFS=/var/cache/livenet/nfs
NFSOPTS="vers=3,retrans=10,nolock,rsize=32768,wsize=32768,async,noatime,hard,intr"
NFSOPTSV4="vers=4,nolock,timeo=20,soft,retry=0"
#NFSOPTSV4="vers=4,proto=tcp,timeo=20,soft,retry=0"
NFSRO=ro
XKBLAYOUT=it
DHCP_TIMEOUT="2 3 4"
accountsdaemon=true


# services
service_on=openssh-server
service_on=ntp
service_on=qemu-kvm
service_on=nslcd
service_on=cron
service_on=avahi-daemon

service_off=whoopsie
service_off=network-manager
service_off=ureadahead-other
service_off=ureadahead
service_off=tty4.conf
service_off=tty5.conf
service_off=tty6.conf
service_off=bluetooth
service_off=anacron
service_off=apport
service_off=speech-dispatcher
service_off=wpa-ifupdown
service_off=pcmciautils
service_off=firewall
service_off=ln-firewall
service_off=ln-vms
service_off=vboxweb-serv
service_off=ondemand
service_off=modemmanager
service_off=speech-dispatcher
service_off=saned
service_off=pppd-dns
service_off=rsync
service_off=uml-utilities
service_off=unattended-upgrades
service_off=grub-common
service_off=ln-install
service_off=ln-grub-update
service_off=smbd
service_off=winbind
service_off=nmbd
service_off=reload-smbd
service_off=samba
service_off=samba-ad-dc

lens_off=gwibber.lens
lens_off=photos.lens
lens_off=music.lens
lens_off=musicstore.lens
lens_off=video.lens
lens_off=video-remote.lens
lens_off=gdocs.scope

roottmppath=/tmp/.${ROOT_LABEL}

mount_root ()
{
    echo "Mounting root..."

    mkdir -p ${roottmppath}
    umount ${roottmppath} > /dev/null 2>&1
    mount -o barrier=0,noatime,nodiratime LABEL=${ROOT_LABEL} ${roottmppath} 2>/dev/null
    if [ $? != 0 ]; then
        echo "ABORT: cannot mount root partition"
        exit 1
    fi
}

umount_root ()
{
    umount -f ${roottmppath}/* >/dev/null 2>&1 
    umount -f ${roottmppath} >/dev/null 2>&1 && rmdir ${roottmppath}
}

log_error() {
    echo "ERROR: $@" >&2
}

PID_LOGX=
ZFIFO=/tmp/.msg
prepare_log_X () {
    rm -f ${ZFIFO}
    mkfifo ${ZFIFO}
    export DISPLAY=:0.0 
    export XAUTHORITY=/var/run/lightdm/root/:0
    do_setbg login
    ( tail --follow=name ${ZFIFO}  | zenity --progress --pulsate --no-cancel --auto-close --text "" ) &
    PID_LOGX=$!
}

kill_log_X () {
    killall zenity >/dev/null 2>&1
    rm -f ${ZFIFO}
    PID_LOGX=
}

log_X() {
    [ -n "${PID_LOGX}" ] || prepare_log_X
    echo "logger: $1"
    echo "# " "$1" > ${ZFIFO}
}

log_lightdm() {
    [ "${PAM_SERVICE}" = "lightdm" ] && log_X "$1"
}

dhcp_release() {
    dhclient -r -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases eth0
}

dhcp_renew() {
    dhclient -1 -pf /run/dhclient.eth0.pid -lf /var/lib/dhcp/dhclient.eth0.leases eth0
}
service_switch() {
    service=$1
    status=$2

    servicepath=/etc/init/${service}.conf

    if [ "${status}" = "off" ]; then
        sysv-rc-conf --list ${service} | grep -q "3:on" && sysv-rc-conf ${service} off

        if [ -f ${servicepath} ] && [ ! -f ${servicepath%%.conf}.override ]; then
            echo "manual" > ${servicepath%%.conf}.override
            echo "${service} switched off"
        fi
    fi
    if [ "${status}" = "on" ]; then
        sysv-rc-conf --list ${service} | grep "3:off" && sysv-rc-conf ${service} on

        if [ -f ${servicepath%%.conf}.override ]; then
            rm ${servicepath%%.conf}.override 
            echo "${service} switched on"
        fi
    fi
}

check_alternative() {
    d=$1
    option=$2

    f=${d#${LIVENET_DIR}}   

    # diversion
    ########### 
    if [ -r ${d}.nfs.default ]; then
        if [ -h ${f} ]; then # is symbolic link
            rm -f ${f}
        else # otherwise keep original file as *.standalone
            [ -f ${f} ] && mv ${f} ${d}.local.standalone
        fi
        update-alternatives --remove-all $(basename $f) >/dev/null 2>&1
	mkdir -p $( dirname ${f} )
        for instance in ${d}.?*.?* ${d##/livenet}.?*.?*; do
            [ -e ${instance} ] || continue
            update-alternatives --install $f $(basename $f) ${instance} 30

            _profile=$( echo $instance | awk -F '.' '{ print $NF }' )
            if [ ! -f /etc/livenet/local/livenet.conf.nfs.${_profile} ]; then
                echo "PROFILE=${_profile}" > /etc/livenet/local/livenet.conf.nfs.${_profile}
            fi
        done 
        update-alternatives --set $(basename $f) ${d}.nfs.default
    else 
    # hard link ###
    ########### 
        if [ ! -f ${d} ]; then
            log_error "no diversion at ${d}.nfs.default and no link at ${d}"
            return 1
        fi
	mkdir -p $( dirname ${f} )
        if [ -h ${f} ]; then
            rm -f ${f}
        fi
        if [ -a ${f} ]; then
            if [ "${option}" = "--force" ]; then
                rm ${f}
            else
                log_error "${f} already exists, remove it before or use --force"
                return 1
            fi
        fi
        ln ${d} ${f}
    fi
}

do_update_alternatives() {
    filename=$1
    key=$( basename ${filename} )
    profile=${PROFILE}
    for f in \
        ${filename}.${ROOTMOUNTED}.${profile} \
        ${filename}.${ROOTMOUNTED}.default \
        ${filename}.nfs.${profile} \
        ${filename}.nfs.default \
        ${LIVENET_DIR}${filename}.${ROOTMOUNTED}.${profile} \
        ${LIVENET_DIR}${filename}.${ROOTMOUNTED}.default \
        ${LIVENET_DIR}${filename}.nfs.${profile} \
        ${LIVENET_DIR}${filename}.nfs.default; do
	if [ -r ${f} ]; then
    	    update-alternatives --set ${key} ${f}
	    return
	fi
    done
    echo "ERROR: no alternative for ${filename}"
}

parse_kernel_args() {
    [ -f /proc/cmdline ] || return
    for x in $(cat /proc/cmdline); do
	case $x in
	livenet_device=*)
	    export DEVICE=${x#livenet_device=}
	    ;;
	livenet_ssid=*)
	    export SSID=${x#livenet_ssid=}
	    ;;
	livenet_debug=*)
	    export LIVENET_DEBUG=${x#livenet_debug=}
	    ;;
	livenet_root=*)
            export LIVENET_ROOT=${x#livenet_root=}
            ;;
	nfsroot=*)
            export LIVENET_ROOT=${x#nfsroot=}
            ;;
	livenet_profile=*)
            export PROFILE=${x#livenet_profile=}
            ;;
	profile=*)
            export PROFILE=${x#profile=}
            ;;
	livenet_action=*)
            export LIVENET_ACTION=${x#livenet_action=}
            ;;
	livenet_action_end=*)
            export LIVENET_ACTION_END=${x#livenet_action_end=}
            ;;
	PROFILE=*)
            export PROFILE=${x#PROFILE=}
            ;;
	esac
    done
}

# used in 00-update
mount_livenet_root() {
    # nfsv4 require idmapd here
    #mount -t nfs -o ro,vers=4,proto=tcp,timeo=30,soft,retry=0 ${LIVENET_ROOT} $1 2>/dev/null

    # nfsv3
    do_log "try mount LIVENET_ROOT ${NFSOPTS} ${LIVENET_ROOT}"
    mount -t nfs -o ro,${NFSOPTS} ${LIVENET_ROOT} $1 2>/dev/null
}


# used in ln-client, ln-vms
do_setbg() {
    WALL=$1
    [ -n "$WALL" ] || WALL=warty-final-ubuntu.png

    xsetbg -onroot -fullscreen -yzoom 130 -fork -border black /usr/share/backgrounds/${WALL}
    xset s off
    xset -dpms
    xset s noblank
}

for conf in \
    /etc/initramfs-tools/initramfs.conf \
    /etc/initramfs-tools/scripts/functions-livenet \
    /${STATETMP}/net-${DEVICE}.conf \
    /etc/livenet/livenet.conf.override \
    /conf/livenet.conf.override \
    /etc/livenet/local/livenet.conf \
    /etc/livenet/local/host.conf \
    ;do
    [ -f ${conf} ] && . ${conf}
done

# this args can override local configuration
parse_kernel_args

PROFILE=${PROFILE:=default}

RELEASE=${LIVENET_ROOT##*/}
FLAG_RELEASE="/etc/livenet/release_${RELEASE}"


export PROFILE
export DEVICE
export LIVENET_ROOT
export LIVENET_DEBUG
export ROOT
export NFSOPTS
export NFSOPTSV4
export STATENFS
export STATETMP
export NFSRO
export FLAG_NFS
export FLAG_RELEASE
export UPDATE_FLAG
export RELEASE
