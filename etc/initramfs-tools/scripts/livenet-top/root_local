#!/bin/sh

PREREQ="dhcp"
DESCRIPTION="Mount local root"

prereqs()
{
       echo "$PREREQ"
}

case $1 in
prereqs)
       prereqs
       exit 0
       ;;
esac
echo $DESCRIPTION

. /scripts/functions
. /scripts/functions-livenet
log_begin_msg "$DESCRIPTION"

if [ -z "${ROOT}" ]; then
    do_log "skip local mount"  
    exit 0
fi

##Before to boot, check for update

#import moudule zfs
/sbin/modprobe zfs

#Import pool named rpool without mountpoint
zpool import rpool -N

#Set mountpoint of rpool to "none"
#si sposto nell'installazione
zfs set mountpoint=none rpool

#Get the name of volume with mountpoint in /
#exmple rpool/ROOT/plutarcolab
ROOT_VOLUME=$(zfs get mountpoint | awk  '$3=="/" {print $1}')

#Get the name of default image 
#example plutarcolab
IMAGE_NAME=$(echo $ROOT_VOLUME | cut -d '/' -f 3)

#Get latest snapshot on this volume
#example rpool/ROOT/plutarco@1530956369
LAST_SNAP=$(zfs list -t snapshot -o name -s creation -r ${ROOT_VOLUME} | tail -1)

#ROLLBACK to latest snapshot
zfs rollback ${LAST_SNAP}

#Get only the name of snaspshot
#example 1530956369
LAST_SNAP_TS=$(echo $LAST_SNAP | cut -d '@' -f 2)

## Mount remote increments directory

# Get remote server
for x in /run/net-"${DEVICE}".conf /run/net-*.conf /tmp/net-*conf; do
    if [ -e $x ]; then
        . ${x}
        #export $ROOTSERVER ||
    fi
done 

#make mount point in to initramfs 
mkdir /mnt

#mount updates
mount.nfs $ROOTSERVER:/LNPZFS/livenet/increases /mnt/

#check how many update need to install
#N_UPDATES=0
#for x in `ls /mnt/$IMAGE_NAME/*.gz`
#do
#    let "N_UPDATES += 1"
#done
#echo $N_UPDATES


#Install all updates
N_UPDATES = 0
N_UPDATE_OK = 0


for UPDATE_FILE in `ls /mnt/$IMAGE_NAME/*.gz`
do
      ##old  NUMBERVALUE=$(echo ${UPDATE_FILE} | cut -d '.' -f 1 | rev | cut -d '/' -f 1 | rev)
      NUMBERVALUE=$(echo ${UPDATE_FILE} | cut -d '.' -f 1 )
      NUMBERVALUE=${NUMBERVALUE##*/}

        let "N_UPDATES += 1"
        if [ ${NUMBERVALUE} -gt ${LAST_SNAP_TS} ]; then
            start_time=$(date +%s)
            echo ${UPDATE_FILE}  "is more recent than " $LAST_SNAP ", now we can install it..."
            zcat ${UPDATE_FILE} | zfs receive -F ${ROOT_VOLUME}
            #sposto qui install grub e update grub
            #presupposto se zfs receive fallisce vale l'ultimo
            end_time=$(date +%s)
            sleep 1
            LAST_SNAP=$(zfs list -t snapshot -o name -s creation -r ${ROOT_VOLUME} | tail -1)
            LAST_SNAP_TS=$(echo $LAST_SNAP | cut -d '@' -f 2)
            echo "The system have install ${UPDATE_FILE} on the volume ${ROOT_VOLUME}, the most recent snapshot of the volume is ${LAST_SNAP}"
            echo "elapsed time: $(( $((end_time - start_time))/60 )) min."
            let "N_UPDATE_OK += 1"
            echo "Install next update"
            sleep 1
        fi
    
done

cd /

umount /mnt
if [[ $(mount | grep /mnt/ | wc -l) -gt 0 ]]; then
#if there are some promblems with umount, bye bye
    umount -lf /mnt/
fi

zfs set mountpoint=/mnt ${ROOT_VOLUME}
#mount senza alterare
zfs mount ${ROOT_VOLUME}
mount --rbind /dev /mnt/dev
mount --rbind /proc /mnt/proc
mount --rbind /sys /mnt/sys


DISK=/dev/sda 
  [ -b $DISK ] || DISK=/dev/vda 
  if [ ! -b $DISK ]; then
    echo "NO vda o sda found"
    exit 1
  fi

chroot /mnt /bin/bash -c "grub-install $DISK"
chroot /mnt /bin/bash -c "update-grub" 


umount /mnt/proc
umount /mnt/sys
umount /mnt/dev/pts
umount /mnt/dev
umount /mnt/

mount | grep -v zfs | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}

#
zfs set mountpoint=/ ${ROOT_VOLUME}

zpool export rpool







# traslate UUID into file block
#echo "$ROOT" | grep -q "UUID="
#if [ $? = 0 ]; then
#    eval $ROOT # to have UUID=
#    ROOT=/dev/disk/by-uuid/$UUID
#fi

#eval $(fstype < ${ROOT}) # Get the root filesystem type
#modprobe ${FSTYPE}



#Check if there are some updates for me

#run get_updates

#Check if all is ok
#TODO

#Continue with boot



. /scripts/zfs
do_debug_shell
#vedere come sono qui

#eseguio get_updates copiando il codice
. /scripts/get_updates

mountroot

# TODO, controllare che mountroot precedente abbia fatto il suo lavoro
#seconds=10 # wait 10 seconds to have disk module (important for scsi driver)
#while [ 1 ]; do
#    if [ -e "${ROOT}" ]; then
#        break
#    fi
#    seconds=$((seconds-1))
#    if [ ${seconds} -lt 1 ]; then
#        do_log "ERROR: No disk module or no root on disk... install cache or add disk module to initramfs.conf#auto_add_module"
#        sleep 30 # wait to permit to read message
#        exit 1
#    fi
#    sleep 1
#done

#mount -o rw -t ${FSTYPE} ${ROOT} ${rootmnt} # rw for update_root, after root partition is remounted ro in livenet-bottom scripts
#if [ ! $? == 0 ]; then # root mounted, try to update now
#    do_log "ERROR: no local boot"
#    sleep 10
#    exit 1
#fi

#for x in /run/net-"${DEVICE}".conf /run/net-*.conf /tmp/net-*.conf; do
#    ROOTMOUNTED=local
#    [ -e "${x}" ] && echo "ROOTMOUNTED=${ROOTMOUNTED}" >> ${x}
#done

log_end_msg

