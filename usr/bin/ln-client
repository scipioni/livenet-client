#!/bin/bash

# Run only client Livenet

PROGNAME=${0##*/}
PROGVERSION=0.1.0
set -e

check_jail() {
    if [ ! "`< /etc/hostname`" = "`hostname`" ]; then
        echo "This program run only on live client, not in chroot jail. Use ln-mng instead." 1>&2
        exit 1
    fi
}

. /etc/livenet/livenet.conf

usage()
{
  cat << EOF
        Usage: $PROGNAME <command> [--help] 

        --install: install livenet on client
	    --install-with-gui: install livenet (called by ln-install service)
        [--force] --boot {local|nfs}: prepare local disk to boot on disk or nfs
        --reset-lightdm: clean lightdm between sessions
        --session-wait: exec ratpoison session with message
        --user <user> --scan <path>: execute clamav and remount share in rw for user
        --shutdown: called from acpid. Used to shutdown only in lightdm login screen.
        --kiosk: kiosk session
        --kiosk-loop: kiosk session
        --monitors-clone: clone second monitor (if connected) to first monitor
	    --grub-update: run grub-update if needed

        Options:
EOF
}

SHORTOPTS="hv"
LONGOPTS="help,version,install,install-with-gui,grub-update,boot:,force,standalone,sync-state,reset-lightdm,session-wait,user:,scan:,shutdown,kiosk,kiosk-loop,monitors-clone,vboxsetup"

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@" )

eval set -- "$ARGS"


#start install process
do_install() {
  start_time=$(date +%s)
  #Check if disk is fisical or virtual device
  #CLEAN DISK
  DISK=/dev/sda 
  [ -b $DISK ] || DISK=/dev/vda 
  if [ ! -b $DISK ]; then
    echo "NO vda o sda found"
    exit 1
  fi
  export DISK
  
  #update disk status 
  sync
  #check if your system need a GPT or MBR
  if [ -d "/sys/firmware/efi" ]; then
        part4efi
        installFromBackup
        do_install_grub_efi
  else
        part4legacy
        installFromBackup  
        do_install_grub_legacy
  fi

}

#This funciotn create a minimal partition schemas for Legacy installation 
part4legacy(){
  echo "Deleting all existing partitions and use MBR"
  parted -a optimal -s $DISK mklabel msdos
  
  sync
  echo "boot partition creation, type ext4"
  parted -a optimal -s $DISK mkpart primary ext4 0% 20%
  sync
  echo "ZPOOL partition creation"
  parted -a optimal -s $DISK mkpart primary 20% 100%
  sync
  parted $DISK set 1 boot on # needed for embedding grub in this partition 
 
  yes |  mkfs.ext4 -F  ${DISK}1
  e2label ${DISK}1 BOOT

  sync
  echo "Creation of main zfs pool: rpool"
  zpool create -o ashift=12 \
      -O atime=off -O canmount=off -O compression=lz4 -O normalization=formD \
      -O mountpoint=none -R /mnt -f \
      rpool ${DISK}2
  
  echo "Creation of volume: rpool/ROOT"
  zfs create -o canmount=off -o mountpoint=none rpool/ROOT
  echo "Cloning latest backup from server"
  zfs set mountpoint=none rpool
  zfs create -o canmount=off -o mountpoint=/home -o overlay=on rpool/home
  zfs create -o canmount=off -o mountpoint=/home/accounts -o overlay=on rpool/home/accounts
  #volume for vms
  zfs create -o canmount=off -o mountpoint=/vms rpool/vms
  #jolly volume
  zfs create -o canmount=off -o mountpoint=/LOCAL rpool/LOCAL
  #snapshost for home cleaning 
  zfs snapshot rpool/home/accounts@snap0
 
  sync

}


part4efi(){
  echo "Deleting all existing partitions"
  sgdisk --clear -g $DISK
  sync
  echo "Set align value, type xenix root"
  sgdisk -a1 -n2:34:2047  -t2:EF02 $DISK
 
  echo "UEFI partition creation, type empty"
  sgdisk     -n3:1M:+512M -t3:EF00 $DISK
  parted $DISK set 3 bios_grub on # needed for embedding grub in this partition 
  echo "Legacy boot loader partition creation"
  sgdisk     -n9:-8M:0    -t9:BF07 $DISK
  
  echo "Boot partition creation"
  sgdisk     -n4:528M:+4096M -t4:BF00 $DISK
  echo "Main partition creation"
  sgdisk     -n1:0:0      -t1:BF01 $DISK
  
  yes |  mkfs.ext4 -F  ${DISK}4
  e2label ${DISK}4 BOOT
  sync
  echo "waiting... "
  sleep 5
  echo "Creation of main zfs pool: rpool"
  zpool create -o ashift=12 \
      -O atime=off -O canmount=off -O compression=lz4 -O normalization=formD \
      -O mountpoint=none -R /mnt -f \
      rpool ${DISK}1
  
  echo "Creation of volume: rpool/ROOT"
  zfs create -o canmount=off -o mountpoint=none rpool/ROOT
  echo "Cloning latest backup from server"
  #Set mountpoint of rpool to "none"
  #si sposto nell'installazione
  zfs set mountpoint=none rpool
  zfs create -o canmount=off -o mountpoint=/home -o overlay=on rpool/home
  zfs create -o canmount=off -o mountpoint=/home/accounts -o overlay=on rpool/home/accounts
  zfs snapshot rpool/home/accounts@snap0
 
  sync
 
}
installFromBackup(){
  #get the name of NFS image
  TMP_MOUNT="/tmp/backup/"
  FROM=$(cat /proc/cmdline | cut -d '/' -f 2)
  mkdir -p $TMP_MOUNT
  #get the path of backups directory
  BACKUPSERVER=$(echo ${LIVENET_ROOT%images*})backups/
  mount -t nfs ${BACKUPSERVER} $TMP_MOUNT
  cd $TMP_MOUNT${FROM}
  echo "Get backup image"
  LAST=$(ls $TMP_MOUNT/${FROM}/*.gz | sort -n -r  | head -1)
  zcat ${LAST} | zfs recv -F rpool/ROOT/${FROM}
  cd ~
  zfs set mountpoint=/ rpool/ROOT/${FROM}
  finish_time=$(date +%s)
  echo "Time elapsed until cloning: $(( $(($finish_time - $start_time)) )) seconds."
  sync
  umount -f $TMP_MOUNT
}

do_install_grub_legacy(){  
  
  echo "create boot volume and copy all files"
  if [ ! -f /mnt/initrd.img ]; then
    zfs mount rpool/ROOT/${FROM}
  fi
  mount --rbind /dev  /mnt/dev
  mount --rbind /proc /mnt/proc
  mount --rbind /sys  /mnt/sys

  echo "Installing boot loader"  
  mkdir -p /media/BOOT
  mount -L BOOT /media/BOOT
  rsync -av /mnt/boot/  /media/BOOT
  sync
  umount -f /media/BOOT
  mount -L BOOT /mnt/boot
  echo -n " boot=livenet profile=${PROFILE} " > /mnt/boot/grub.options
  
  #chroot /mnt /bin/bash -c "mount -a"
  chroot /mnt /bin/bash -c "grub-install ${DISK}"
  echo "update grub menu"

  chroot /mnt /bin/bash -c "update-grub"  
  
  sync
  
  mount | grep -v bind | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}
  mount | grep -v zfs | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}
  
  zfs set mountpoint=/ rpool/ROOT/${FROM}
  zfs set canmount=on rpool/ROOT/${FROM}
  zfs set canmount=on rpool/home
  zfs set canmount=on rpool/home/accounts

  mount | grep -v zfs | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}

  zpool export rpool

  echo "FINISH, reboot"
  systemctl --force --force reboot
  
}


do_install_grub_efi(){
    echo "create boot volume and copy all files"
    if [ ! -f /mnt/initrd.img ]; then
        zfs mount rpool/ROOT/${FROM}
    fi
    mount --rbind /dev  /mnt/dev
    mount --rbind /proc /mnt/proc
    mount --rbind /sys  /mnt/sys
  
    echo "Installing boot loader"  
    mount -L BOOT /mnt/boot/
    rsync -av /boot/  /mnt/boot/
  
    echo -n " boot=livenet profile=${PROFILE} " > /mnt/boot/grub.options
  
    chroot /mnt /bin/bash -c "mount -a"
    chroot /mnt /bin/bash -c "grub-install ${DISK}"
    echo "update grub menu"

    chroot /mnt /bin/bash -c "update-grub"  
  
    sync
  
    mount | grep -v bind | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}
    mount | grep -v zfs | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}
  
    zfs set mountpoint=/ rpool/ROOT/${FROM}
    zfs set canmount=on rpool/ROOT/${FROM}
    zfs set canmount=on rpool/home
    zfs set canmount=on rpool/home/accounts

    mount | grep -v zfs | tac | awk '/\/mnt/ {print $3}' | xargs -i{} umount -lf {}

    zpool export rpool

    echo "FINISH, reboot"
    systemctl --force --force reboot

 }
do_boot() {
    ROOTMOUNTED=$1
    set +e
    for module in $(ls /etc/livenet/boot/*.default /etc/livenet/boot/*.${ROOTMOUNTED} | sort); do
        mm=$(basename ${module})
        if [ -x ${module} ]; then
            do_log "Configuring ${mm}.${ROOTMOUNTED}"
            . ${module} ""
        else
            do_log "Skip ${mm}"
        fi
    done
    set -e
}


        
do_session_wait() {
    ratpoison &
    do_setbg login
    for i in $( seq 20 10 99 ) 9999; do 
        sleep $(($i/2))
        echo $i
    done | zenity --progress --no-cancel --auto-close --width 400 --text "Aggiornamento in corso ..."
}

do_scan() {
    SHARE=$1
    USER=$2
    
    
    export DISPLAY=:0.0 
    USERHOME=$( getent passwd ${USER} | awk -F: '{print $6}' )
    export XAUTHORITY=${USERHOME}/.Xauthority
    
    if [ ! -x /usr/bin/clamscan ]; then
        zenity --error --text "Clamav non trovato" 
        return
    fi

    flagvirus=/tmp/.foundviruses
    clamscan --exclude=.*.[Cc][Hh][Kk] --infected -r -v ${SHARE} | tee >( grep FOUND > ${flagvirus} ) | zenity --progress --pulsate --auto-close --text "Scansione in corso ..."
    scandialog=$?

    if [ ${scandialog} != 0 ]; then
        rm -f ${flagvirus}
        # lasciamo montato il drive per renderlo inutilizzabile
        return
    fi         
    virus=$( cat ${flagvirus} | wc -l )
    if [ $virus -gt 0 ]; then
        zenity --error --text "Attenzione\!\nTrovati Virus\!\nNumero di minacce rilevate: $virus\n\nREPORT\n____________\n$(cat ${flagvirus})" &
        sleep 1
        rm -f ${flagvirus}
        # lasciamo montato il drive per renderlo inutilizzabile
        return
    fi
    rm -f ${flagvirus}
    mount -o remount,uid=${USER},rw ${SHARE} >/dev/null 2>&1
    if [ $? = 0 ]; then
        zenity --info --text "Aprire l'icona USB sul desktop" &
    fi    
}

do_kiosk() {
    ratpoison &
    wmpid=$!
    sleep 2 # Wait until ratpoison starts up.
    PATH=/opt/firefox:${PATH}

    if [ -f ~/.run ]; then
    	exec ~/.run 
    else
        if [ -f ~/.url_to_open ]; then
           URL=$(cat ~/.url_to_open)
        fi
        exec firefox ${URL}
    fi
}

do_kiosk_loop() {
ratpoison &
    #Disable right mouse button
    xmodmap -e "pointer = 1 2 11"
    #Enable us keyboard for user
    setxkbmap us
    #Run Xscreensaver
    xscreensaver -nosplash &
    wmpid=$!
    sleep 2 # Wait until ratpoison starts up.
    PATH=/opt/firefox:${PATH}

    if [ -f ~/.url_to_open ]; then
        URL=$(cat ~/.url_to_open)
    fi

    while true; do
      firefox ${URL}
    done

    wait $wmpid
}

do_monitors_clone() {
    PORTS=$(xrandr -q | grep " connected" | awk '{ print $1 }')
    PORT1=$(echo $PORTS | awk '{print $1}')
    PORT2=$(echo $PORTS | awk '{print $2}')

    if [ -n "$PORT1" ] && [ -n "$PORT2" ]; then
        MODE=$( xrandr -q | grep -A1 " connected" | egrep "^\s+[0-9]+x[0-9]+" | awk '{ print $1 }' | sort -h | head -n 1 )
        echo "Dual monitor detected, setting $PORT1 and $PORT2 to $MODE"
        set -x
        xrandr --output ${PORT1} --mode ${MODE}
        xrandr --output ${PORT2} --mode ${MODE} --same-as ${PORT1} 
        if [ $? != 0 ]; then # non esiste una risoluzione in comune, passo a una risoluzione di compromesso
            MODE=1024x768
            echo "No common resolution, try workaround $MODE"
            xrandr --output ${PORT1} --mode ${MODE}
            xrandr --output ${PORT2} --mode ${MODE} --same-as ${PORT1} 
        fi
    else
        echo "No dual monitor detected, exit"
    fi
}




do_grub_update() {

    echo "Updating grub"
         
    #mount -L BOOT /boot
        
	mount --bind / /mnt
	mount >> /var/log/grub-update.log
        DIFF_NUM=$(diff -rq /boot /mnt | wc -l)
	echo $DIFF_NUM >> /var/log/grub-update.log
        if [ "${DIFF_NUM}" -gt "0" ] ; then
            rsync -av /mnt/boot/ /boot/
            umount /mnt
            /usr/sbin/update-grub

            #update-grub
            #mount -L BOOT /boot
           echo "System last update $(date)" >> /var/log/grub-update.log
        else 
            umount -lf /mnt
        fi





}


while true; do
   case $1 in
      -h|--help)
        usage
        exit 0
        ;;
      -v|--version)
        echo "$PROGVERSION"
        ;;
      --install)
        check_jail
	do_install
	break
	;;
      --install-with-gui)
	if [ "${LIVENET_ACTION}" != "install" ] && [ "${LIVENET_ACTION}" != "install_force" ]; then
	   echo "no livenet_action=install in cmdline"
	   exit 0
	fi
        check_jail
    #	update-alternatives --set lightdm.conf /etc/lightdm/lightdm.conf.nfs.special
	#systemctl restart lightdm
	do_install
    	sleep 5
    	update-alternatives /etc/lightdm/lightdm.conf
	systemctl restart lightdm
	if [ "${LIVENET_ACTION_END}" = "halt" ]; then
	    halt -p
	fi
	if [ "${LIVENET_ACTION_END}" = "reboot" ]; then
	    reboot -f
	fi
	break
	;;

      --force)
        FORCE=true
        ;;
      --boot)
        shift 
        ROOTMOUNTED=${1:=nfs}
        [ -n "${FORCE}" ] || check_jail
        do_boot ${ROOTMOUNTED}
	break
	;;
      --standalone)
        do_standalone
        exit $?
        ;;
      --sync-state)
        do_sync_state
        break
        ;;
      --reset-lightdm)
        rm -fR /var/lib/lightdm/.cache/* 
        break
        ;;
      --session-wait)
        do_session_wait
        break
        ;;
      --user)
        shift
        USER=$1
        ;;
      --scan)
        shift
        do_scan $1 ${USER}
        exit 0
        ;;
      --shutdown)
        ck-list-sessions | grep -q LoginWindow
        if [ $? = 0 ]; then
            /sbin/shutdown -h now "Power button pressed"
        fi
        break
        ;;
      --kiosk)
        do_kiosk
        break
        ;;
      --kiosk-loop)
        do_kiosk_loop
        break
        ;;
      --monitors-clone)
        do_monitors_clone
        break
        ;;
      --grub-update)
	do_grub_update
	break
	;;
      --)
        shift
        break
        ;;
      *)
        shift
        break
        ;;
   esac
   shift
done

exit 0
