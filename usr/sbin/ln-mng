#!/bin/bash

# Run only in CHROOT jail

PROGNAME=${0##*/}

if [ "$1" != "--bootstrap" ]; then
    if [ "`< /etc/hostname`" = "`hostname`" ]; then
        echo "This program run only in chroot jail. Use ln-client instead." 1>&2
        exit 1
    fi
fi

usage()
{
  cat << EOF
        Usage: $PROGNAME <command> [--help] 

	command:

        --bootstrap: first stanza operations 
        --clean: clean stanza
        --kernel: rebuild initramfs
        --kernel-remove-old: remove old kernels
        --italian: install italian language
        --profile-delete <profile>: remove profile from /etc /usr and /livenet
        --profiles: make diversions and hard link 
        --profiles-list: show profiles list
        --packages-base:
        --packages:
        --set-grub-password: set superuser password to grub
	--version: show package version

EOF
}

SHORTOPTS="hvte:"
LONGOPTS="help,version,test,example:,bootstrap,profiles,packages-base,kernel,italian,packages,kernel-remove-old,force,clean,set-grub-password,profiles-list,list,profile-delete:"

ARGS=$(getopt -s bash --options $SHORTOPTS --longoptions $LONGOPTS --name $PROGNAME -- "$@" )
eval set -- "$ARGS"

do_check_alternative() {
    d=$1
    alternative_name=$2

    #f=${d#${LIVENET_DIR}}   
    f=${d}   

    [ -n "${alternative_name}" ] || alternative_name=$(basename $f)

    # diversion
    ########### 
    if [ -r ${d}.nfs.default ]; then
        if [ -h ${f} ]; then # is symbolic link
            rm -f ${f}
        else # otherwise keep original file as *.standalone
            [ -f ${f} ] && mv ${f} ${d}.local.standalone
        fi
        update-alternatives --remove-all ${alternative_name} >/dev/null 2>&1
	mkdir -p $( dirname ${f} )
        for instance in ${d}.?*.?* ${d##/livenet}.?*.?*; do
            [ -e ${instance} ] || continue
            update-alternatives --install $f ${alternative_name} ${instance} 30

            _profile=$( echo $instance | awk -F '.' '{ print $NF }' )
            if [ ! -f /etc/livenet/local/livenet.conf.nfs.${_profile} ]; then
                echo "PROFILE=${_profile}" > /etc/livenet/local/livenet.conf.nfs.${_profile}
            fi
        done 
        update-alternatives --set ${alternative_name} ${d}.nfs.default
    else 
        log_error "${d}.nfs.default does not exists"
        return 1
    fi
}

do_bootstrap() {
    echo "Bootstrap..."

    # maybe best place is in /var
    mkdir -p /etc/livenet/configured /etc/livenet/local
    touch /etc/livenet/local/livenet.conf.nfs.default

    . /etc/livenet/livenet.conf
    
    mkdir -p $( dirname ${DIVERSIONS} )
    [ -f ${DIVERSIONS_LOCAL} ] || touch ${DIVERSIONS_LOCAL}

    # there is at least one update!
    [ -d /${ALLUPDATES} ] || mkdir -p /${ALLUPDATES} 
    if [ `ls /${ALLUPDATES}/2???????-???? 2>/dev/null | wc -l` = 0 ]; then
        u=${ALLUPDATES}/`date +%Y%m%d-0000`
        touch /$u
        echo $u > /${ALLUPDATES}/list
    fi
    
    # ln-shutdown service start/stop
    if [ ! -f /etc/rc0.d/S19ln-shutdown ]; then
        echo "Activate ln-shutdown in runlevel 0"
        ln -s /etc/init.d/ln-shutdown /etc/rc0.d/S19ln-shutdown
    fi
    
    if [ ! -f /etc/rc6.d/S19ln-shutdown ]; then
        echo "Activate ln-shutdown in runlevel 6"
        ln -s /etc/init.d/ln-shutdown /etc/rc6.d/S19ln-shutdown
    fi
    
    # install user needed by install mode (lightdm autologin user)
    id install >/dev/null 2>/dev/null
    if [ $? != 0 ]; then
        echo "Create 'install' user"
        useradd -u 499 -g users -s /bin/false -d /var/tmp -c "system account" install
    fi
         
    do_profiles
	 
    # rebuild initram 
    dpkg-reconfigure linux-image-${KERNEL}
}

do_diversions_build() {
    . /etc/livenet/livenet.conf
    echo "Searching and building diversions from /etc,/lib,/usr directories and merge ${DIVERSIONS_LOCAL}"
    find /etc /lib /usr -type f -a \( -name "*.nfs.*" \) ! -wholename "*.gz" \
        ! -wholename "*zz-update-grub*" \
        ! -wholename "*.dpkg-dist" \
        ! -wholename "*.ucf-dist" \
        | sed "s/\.nfs.\w\+//" | sort | uniq > ${DIVERSIONS}
    find /etc /lib /usr -type d -a \( -name "*.nfs.*" \) | sed "s/\.nfs.\w\+//" | sed "s/\.local.\w\+//" | sort | uniq >> ${DIVERSIONS}
    
    do_check_alternative /etc/kernel/postrm.d/zz-update-grub zz-update-grub-postrm >/dev/null
    do_check_alternative /etc/kernel/postinst.d/zz-update-grub zz-update-grub-postinst >/dev/null

    [ -f ${DIVERSIONS_LOCAL} ] && cat ${DIVERSIONS_LOCAL} >> ${DIVERSIONS}
}


do_profiles_list() {
    for i in /etc/livenet/local/livenet.conf.*.*; do 
        i=$( echo $i | awk -F '.' '{ print " " $NF}' )
        [ $i = "special" ] || [ $i = "standalone" ] && continue
        echo $i
    done
}

do_profiles() {
    . /etc/livenet/livenet.conf
    
    do_diversions_build
    
    if [ ! -f ${DIVERSIONS} ]; then
        log_error "no ${DIVERSIONS} defined" 
        exit 1
    fi

    do_check_alternative /etc/livenet/local/livenet.conf >/dev/null
    for f in $( egrep -v "^\s*$|^\s*#" ${DIVERSIONS} ); do 
        echo " "$f
	do_check_alternative ${f} >/dev/null
    done

    echo 
    echo "Detected profiles:"
    do_profiles_list
    echo
}

do_packages() {
    packages=$1
    tmp=/tmp/$$.apt

    echo -n > ${tmp}
    for APT in `find /etc/apt/ -name *.list`; do
        grep -o "^deb http://ppa.launchpad.net/[a-z0-9\-]\+/[a-z0-9\-]\+" $APT | while read -r ENTRY ; do
            USER=`echo $ENTRY | cut -d/ -f4`
            PPA=`echo $ENTRY | cut -d/ -f5`
            echo ppa:$USER/$PPA >> ${tmp}
        done
    done

    need_update=
    for p in $( egrep "^ppa:" $packages ); do 
        grep -q $p /tmp/$$.apt
        if [ $? != 0 ]; then
            echo "INSTALL $p"
            add-apt-repository --yes $p
            need_update=true
        fi
    done
    rm -f ${tmp}

    if [ -n "${need_update}" ]; then
        apt-get update >/dev/null
    fi

    for p in $( egrep -v "^\s*$|^\s*#|^ppa\:" $packages ); do 
        echo "Checking $p ..."
        dpkg -s $p >/dev/null 2>&1
        [ $? = 0 ] || apt-get -y install $p
    done
}

do_italian() {
    apt-get install --yes $( check-language-support -l it )
    apt-get install --yes $( check-language-support -l en )

    update-locale LANG=it_IT.UTF-8 LANGUAGE=it:en_US:en

    dpkg-reconfigure keyboard-configuration
    dpkg-reconfigure console-setup
    dpkg-reconfigure tzdata
}

do_grub_password() {
    GRUBPASS=$1
    echo
    ENCPASS=$( python -c "from passlib.hash import grub_pbkdf2_sha512; print grub_pbkdf2_sha512.encrypt('${GRUBPASS}', rounds=10964, salt='liveme')" )
    cat > /etc/grub.d/01_security <<EOF
cat <<EOT
set superusers="root"
password_pbkdf2 root ${ENCPASS}
EOT
EOF

    chmod +x /etc/grub.d/01_security
    chown root:root /etc/grub.d/01_security
    chmod o-rwx /etc/grub.d/01_security
}

do_check_services() {
    what=$1
    for s in $(grep "^service_${what}=" /etc/livenet/livenet.conf); do
        unset service_off service_on
        eval $s
        service=${service_off}
        [ -z "${service}" ] && service=${service_on}
        #echo "checking ${service} is ${what}"
        service_switch ${service} ${what}
    done
}

lens_switch() {
    lens=$1
    status=$2
    if [ "${status}" = "off" ]; then
        current=$( find /usr/share/unity/lenses -name ${lens} )
        if [ -n "${current}" ]; then
            echo "Switching off ${lens} lens"
            mv ${current} ${current}.disabled
        fi
    fi
    
    if [ "${status}" = "on" ]; then
        current=$( find /usr/share/unity/lenses -name ${lens}.disabled )
        if [ -n "${current}" ]; then
            echo "Switching on ${lens} lens"
            mv ${current}.disabled ${current}
        fi
    fi
}


do_check_lens() {
    what=$1
    for s in $(grep "^lens_${what}=" /etc/livenet/livenet.conf); do
        unset lens_off lens_on
        eval $s
        lens=${lens_off}
        [ -z "${lens}" ] && lens=${lens_on}
        #echo "checking ${lens} is ${what}"
        lens_switch ${lens} ${what}
    done
}

do_clean() {
    . /etc/livenet/livenet.conf
    for module in $(ls /etc/livenet/clean.d/* | sort); do
        mm=$(basename ${module})
        if [ -x ${module} ]; then
            do_log "Configuring ${mm}"
            . ${module} ""
        else
            do_log "Skip ${mm}"
	fi
    done
}

do_clean_old() {
    if [ -f /usr/share/unity/lenses/shopping/shopping.lens ]; then
        echo "Remove unity-lens-shopping"
        apt-get remove --purge unity-lens-shopping >/dev/null
    fi

    # disable accountsservice
    if [ -x /usr/lib/accountsservice/accounts-daemon ]; then
        if [ -z "${accountsdaemon}" ] || [ "${accountsdaemon}" = "true" ]; then
            echo "Disable accounts-daemon"
            chmod -x /usr/lib/accountsservice/accounts-daemon
        fi
    fi

    # disable zeitgeist
    for i in /usr/bin/zeitgeist-datahub /usr/lib/zeitgeist/zeitgeist-fts; do
        if [ -x ${i} ]; then
            echo "Disable zeitgeist $i"
            chmod -x ${i}
        fi
    done
    
    # disable geoclue
    for i in /usr/lib/geoclue/geoclue-master /usr/lib/ubuntu-geoip/ubuntu-geoip-provider; do
        if [ -x ${i} ]; then
            echo "Disable geoclue $i"
            chmod -x ${i}
        fi
    done
    
    # disable evolution
    for i in /usr/lib/evolution/evolution-source-registry; do
        if [ -x ${i} ]; then
            echo "Disable evolution $i"
            chmod -x ${i}
        fi
    done

    # disable amazon and ubuntumusic
    for i in \
        /usr/share/applications/ubuntu-amazon-default.desktop \
        /usr/share/applications/UbuntuOneMusiconeubuntucom.desktop \
        ; do
        if [ -f ${i} ]; then
            echo "Disable app $i"
            mv ${i} ${i}.disabled
        fi
    done
    
    if [ ! -d /vms ]; then
        echo "Create /vms dir"
        mkdir -p /vms
        touch /vms/.empty
    fi

    if [ ! -d /mnt/vms ]; then
        echo "Create /mnt/vms dir"
        mkdir -p /mnt/vms
        touch /mnt/vms/.empty
    fi
    

    # dvd codecs
    dpkg -s libdvdcss2 >/dev/null 2>&1
    if [ $? != 0 ]; then
        echo "Installing DVD codecs"
        if [ -f /usr/share/doc/libdvdread4/install-css.sh ]; then
            /usr/share/doc/libdvdread4/install-css.sh
        else
            echo "Install all packages needed with ln-mng --packages"
        fi
    fi

    # for usb fs ln-usbkey
    mkdir -p /mnt/usb
    [ -f "/mnt/usb/Inserire la chiavetta e premere F5" ] || touch "/mnt/usb/Inserire la chiavetta e premere F5"

    if [ ! -d /var/lib/clamav ]; then
        echo "Create /var/lib/clamav"
        mkdir -p /var/lib/clamav
        touch /var/lib/clamav/.empty
        chown -R clamav:clamav /var/lib/clamav
    fi
    
    # install user needed by install mode (lightdm autologin user)
    id install >/dev/null 2>/dev/null
    if [ $? != 0 ]; then
        echo "Create 'install' user"
        useradd -g 100 install
    fi
    
    do_check_lens off
    do_check_lens on

    do_check_services off
    do_check_services on 
}

while true; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -v|--version)
            apt-cache show livenet-client | sed -n 's/^Version:.\([0-9\.]\+\)-.*/\1/p'
            ;;
        --example|-e)
            shift
            echo "argument is $1"
            ;;
        --test)
            echo "test"
            ;;
        --bootstrap)
            do_bootstrap
            do_clean
            break
            ;;
        --profiles)
            do_profiles
            break
            ;;
        --profiles-list|--list)
            do_profiles_list
            break
            ;;
        --packages)
            do_packages /etc/livenet/packages.conf
            break
            ;;
        --packages-base)
            do_packages /etc/livenet/packages-base.conf
            break
            ;;
        --kernel)
            . /etc/livenet/livenet.conf
            dpkg-reconfigure linux-image-${KERNEL}
            break
            ;;
        --kernel-remove-old)
            . /etc/livenet/livenet.conf
            dpkg -l 'linux-*' | sed '/^ii/!d;/'"${KERNEL}"'/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d' | xargs apt-get -y purge
            break
            ;;
        --italian)
            do_italian
            break
            ;;
        --clean)
            do_clean
            break
            ;;
        --set-grub-password)
            read -s -p "Enter Password: " GRUBPASS
            do_grub_password ${GRUBPASS}
            break
            ;;
        --profile-delete)
            shift
            profile=$1
            if [ "${profile}" = "default" ] || [ "${profile}" = "special" ] || [ "${profile}" = "standalone" ]; then
                echo "Profile ${profile} is not allowed"
                exit 1
            fi
            find /etc /livenet /usr -name "*.*.${profile}" -exec rm \{\} \;
            do_diversions_build
            do_profiles --force
            break
            ;;
        --)
            shift
            exit 1
            ;;
        *)
            shift
            break
            ;;
    esac
    shift
done
